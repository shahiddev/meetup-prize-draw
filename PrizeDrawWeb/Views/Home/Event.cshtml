@model PrizeDrawWeb.Models.Home.EventViewModel
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Event!";
    Layout = null;
    var animationDurationMs = 750;
    var iterationCount = 10;
}
<!DOCTYPE html>
<html>

<head>
    <title>Prize Draw</title>
    <style>
        html,
        body {
            height: 100%;
            width: 100%;
            margin: 0;
            padding: 0;
        }

        #container {
            height: 100%;
            width: 100%;
            margin: 0;
            padding: 0;
            font-family: 'Courier New', Courier, monospace;
            font-weight: bold;
            font-size: 2em;
        }
        .row {
            height: @Model.RowHeight%;
            margin: 0;
            padding: 0;
        }
        .cell {
            display: inline-block;
            width: @Model.CellWidth%;
            height: 100%;
            margin: 0;
            padding: 0;
            position: relative;
            text-align: center;
        }
        .cell.selected {
            z-index: 99999;
            overflow: visible;
            animation-name: stretch;
            animation-duration: @(animationDurationMs)ms;
            animation-timing-function: ease-out;
            animation-delay: 0;
            animation-direction: alternate;
            animation-iteration-count: 1;
            animation-fill-mode: none;
            animation-play-state: running;
        }
        @@keyframes stretch {
            0% {
                transform: scale(1);
            }
            60% {
                transform: scale(1.25);
            }
            100% {
                transform: scale(1);
            }
        }
        .cell.selected.final{
            transform: scale(2);
        }
        .cell.dim {
            background-color: white !important;
            color: lightgrey !important;
            -webkit-transition: background-color 1000ms linear;
            -ms-transition: background-color 1000ms linear;
            transition: background-color 1000ms linear;
        }

        .cell .image{
            overflow:hidden;
            height: 100%;
            width:100%;
            position: absolute;
        }
        .cell .image img{
            max-height:100%;
            max-width:100%;
            overflow:hidden
        }
        .cell .name{
            width:100%;
            height: 1em;
            position: absolute;
            top:80%;
            background-color: rgba(255, 255, 255, 0.5);
        }
        .hidden{
            visibility: hidden;
        }
    </style>
</head>

<body>
    <div id="container">
        @foreach (var row in Model.Rsvps)
        {
            <div class="row">
                @*@foreach (var cell in row) {<div class="cell @cell.Colour"><div class="image"><img style="max-height:100%;max-width:100%;overflow:hidden" src="@cell.ImageUrl" /></div><div class="name">@cell.Display</div></div>}*@
                @foreach (var cell in row)
                {<div class="cell" style="background-color:@cell.Colour" data-rsvp="@cell.RsvpInfo"><div class="image"><img class="hidden" src="@(@cell.ImageUrl?? "/person.png")" /></div><div class="name">@cell.Display</div></div>}
            </div>
        }
    </div>

    <script>
        function selectElement(element){
            element.getElementsByTagName("img")[0].classList.remove("hidden");
            element.classList.add("selected");
        }
        function unselectElement(element){
            element.getElementsByTagName("img")[0].classList.add("hidden");
            element.classList.remove("selected");
        }
        function stripItemFromArray(array, indexToSkip){
            var result = [];
            for(i = 0 ; i < array.length ; i ++)
            {
                if (i !== indexToSkip){
                    result.push(array[i]);
                }
            }
            return result;
        }
        function postWinnerToSlack(winnerDetails) {
            @if(!string.IsNullOrWhiteSpace(Configuration["PrizeDrawWeb_SlackApiUri"]))
            {<text>
                var url = "@Configuration["PrizeDrawWeb_SlackApiUri"]";
                var text = `${new Date()}: ${winnerDetails}`;
                fetch(url, {
                    method: "POST",
                    body: JSON.stringify({ "text": text })
                })
</text>
            }
        }
        var cells = document.getElementsByClassName("cell");
        var lastCell = null;
        function Animate() {
            var sleep = @animationDurationMs; // this should match the CSS animation duration :-)
            var iterationCount = @iterationCount;
            var lastIndex = -1;
            if (lastCell !== null){
                // clean up UI after last run!
                unselectElement(lastCell);
                lastCell.classList.add("dim");
                for (let i = 0; i < cells.length; i++) {
                    if (i !== lastIndex) {
                        cells[i].classList.remove("dim")
                    }
                }
            }
            function doAnimation() {
                iterationCount--;
                if (iterationCount >= 0) {
                    var cellIndex = Math.floor(Math.random() * cells.length);
                    var element = cells[cellIndex];
                    if (lastIndex >= 0) {
                        unselectElement(cells[lastIndex]);
                    }
                    selectElement(element);
                    lastIndex = cellIndex;
                    setTimeout(doAnimation, sleep);
                } else {
                    for (let i = 0; i < cells.length; i++) {
                        if (i !== lastIndex) {
                            cells[i].classList.add("dim")
                        }
                    }
                    cells[lastIndex].classList.add("final");
                    lastCell = cells[lastIndex]; // store to clean up for next run!
                    cells = stripItemFromArray(cells, lastIndex); // remove from list in case of repeated running
                    var rsvpInfo = lastCell.getAttribute("data-rsvp");
                    console.log(`Winner: ${rsvpInfo}`);
                    postWinnerToSlack(rsvpInfo);
                    running = false;
                }
            }
            doAnimation();
        }

        var running = false;
        document.onkeypress = ev => {
            if (ev.key === " " && !running){
                running = true;
                Animate();
            }
        }
    </script>
</body>

</html>